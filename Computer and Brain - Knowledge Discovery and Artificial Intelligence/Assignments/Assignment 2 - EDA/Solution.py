# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sbznBuldECKxAxiW-kbSzwuIGNjeSO7M

**Assignment - 2**

**Ashutosh Jha**

**(11811)**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime

"""**Dataset import**"""

from google.colab import files

csv_upload = files.upload()

dataset = pd.read_csv("googleplaystore.csv")

dataset.head()

dataset.tail()

dataset.shape

dataset.columns

dataset.info()

dataset.nunique()

dataset.dtypes

dataset.duplicated().sum()

"""Removing duplicated entries"""

dataset.drop_duplicates(keep=False,inplace=True)

dataset.duplicated().sum()

dataset.describe()

"""Working on the missing values"""

dataset['Rating'].unique()

"""dataset.Rating.value_counts()"""

dataset[dataset['Rating']==19.0]

plt.figure(figsize=(20, 8))
sns.boxenplot(x='Rating', data=dataset)

"""Outlier at 19 proved by the graph, converting that value to nan"""

dataset.loc[dataset['Rating'] == 19.0, 'Rating'] = np.NaN

dataset['Rating'].unique()

dataset.isnull().sum()

( dataset.isnull().sum() / dataset.count() ) * 100

"""So, we have around 17% missing values in rating.

So, if we didnt remove the duplicated entries, this percentage comes around 15.68%.

Heat map to show missing values
"""

sns.heatmap(dataset.isnull(), yticklabels=False, cbar=False, cmap='coolwarm')

plt.figure(figsize=(20, 8))
sns.boxenplot(x='Rating', data=dataset)

dataset.plot(kind='box', subplots=True, layout=(2,10), sharex=False, sharey=False, figsize=(20,10))

"""Plotting the same graph setting the x-limits of the current axes"""

plt.figure(figsize=(20,10))
plt.xlim(0,6)
sns.boxenplot(x='Rating', data=dataset);

"""So, we now have to convert the missing values"""

dataset.groupby('Category').mean()

dataset.Rating.mean()

dataset['Rating'] = dataset['Rating'].fillna(dataset.Rating.mean())

dataset.isnull().sum()

"""So, now as we can see there are some missing values in some of columns also

As our dataset is very big we will drop the rows contatining nan values.
"""

dataset['Current Ver'] = dataset['Current Ver'].astype(str)
dataset['Android Ver'] = dataset['Android Ver'].astype(str)
dataset['Type'] = dataset['Type'].astype(str)
dataset['Content Rating'] = dataset['Content Rating'].astype(str)
dataset['Category'] = dataset['Category'].astype(str)

dataset.dropna()

dataset.isnull().sum()

CategoryString = dataset["Category"]
categoryVal = dataset["Category"].unique()
categoryValCount = len(categoryVal)
category_dict = {}
for i in range(0,categoryValCount):
    category_dict[categoryVal[i]] = i
dataset["Category_c"] = dataset["Category"].map(category_dict).astype(int)

"""Oh yess, there is no missing data now. So, lets get to know our data with some graphs

Category Distribution
"""

plt.figure(figsize=(20,10))
plt.xlabel("Number of apps", fontsize=20)
plt.ylabel("Category of apps", fontsize=20)
plt.title("How category of apps are distributed?", fontsize=20)
ax = dataset['Category'].value_counts().plot(kind='barh', fontsize=14);
right_side = ax.spines["right"]
top_side = ax.spines["top"]
right_side.set_visible(False)
top_side.set_visible(False)

"""Family category tops the chart with most no. of applications followed by the game and tools categories. Most categories dont have even 500 applications.

Genres Distribution
"""

plt.figure(figsize=(20,10))
plt.xlabel("Number of apps", fontsize=20)
plt.ylabel("Genres of apps", fontsize=20)
plt.title("How genres of apps are distributed?", fontsize=20)
temp = dataset.Genres.value_counts()
ax = temp[temp.values > 60].plot(kind='barh', fontsize=14);
ax.xaxis.label.set_size(30)
ax.yaxis.label.set_size(30)
right_side = ax.spines["right"]
top_side = ax.spines["top"]
right_side.set_visible(False)
top_side.set_visible(False)

"""so, our dataset has more tools applications followed by entertainment and education"""

plt.figure(figsize=(20,10))
plt.xlabel("Number of apps", fontsize=20)
plt.ylabel("Android Verison", fontsize=20)
plt.title("Android version used by developers", fontsize=20)
ax = dataset.groupby('Android Ver').count()['Installs'].plot(kind='barh', fontsize=14);
ax.yaxis.label.set_size(30)
right_side = ax.spines["right"]
top_side = ax.spines["top"]
right_side.set_visible(False)
top_side.set_visible(False)

"""So, we will convert this data and plot again. We will cast the version to int"""

dataset["Android Ver"].unique()

dataset["Android Ver"].str.split(' ')

def splitData(string):
  data = string.split(" ")
  return data[0]
dataset['Android Ver'] = dataset['Android Ver'].apply(splitData)

plt.figure(figsize=(20,10))
plt.xlabel("Number of apps", fontsize=20)
plt.ylabel("Android Verison", fontsize=20)
plt.title("Android version used by developers", fontsize=20)
ax = dataset.groupby('Android Ver').count()['Installs'].plot(kind='barh', fontsize=14);
ax.yaxis.label.set_size(30)
right_side = ax.spines["right"]
top_side = ax.spines["top"]
right_side.set_visible(False)
top_side.set_visible(False)

dataset['Current Ver'] = dataset['Current Ver'].apply(splitData)

plt.figure(figsize=(20,10))
plt.xlabel("Count", fontsize=20)
plt.ylabel("Installs", fontsize=20)
plt.title("Installs", fontsize=20)
ax = dataset['Installs'].value_counts().plot(kind='barh', fontsize=14);
right_side = ax.spines["right"]
top_side = ax.spines["top"]
right_side.set_visible(False)
top_side.set_visible(False)

"""Install levels increases exponentially"""

dataset['Rating'].hist().plot(lind='bar')
plt.title('Rating Histogram')

"""Lets draw a median line to know more about data"""

x = dataset['Rating']
result = plt.hist(x, bins=20, color='blue', edgecolor='k', alpha=0.65)
plt.axvline(x.mean(), color='blue', linestyle='dashed', linewidth=1)
plt.axvline(x.mean(), color='r', linestyle='solid', linewidth=2)

"""Ratings follow a Left skewed distribution
(red line is the median)
"""

dataset['Type'].hist().plot(lind='bar')
plt.title('Type of Apps')

"""So, most of the apps are free apps. But mind it, some apps also has in game purchases"""

((dataset['Type'] == 'Free').sum() ) / (dataset['Type'].count())

"""So, around 92.63% apps are free"""

corr_matrix = dataset.corr()
fig, ax = plt.subplots(figsize=(15, 15))
ax = sns.heatmap(corr_matrix,
                 annot=True,
                 linewidths=0.5,
                 fmt=".2f");
bottom, top = ax.get_ylim()
ax.set_ylim(bottom + 0.5, top - 0.5)